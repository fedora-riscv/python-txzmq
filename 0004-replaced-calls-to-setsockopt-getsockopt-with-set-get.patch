From 94ab20321026cc1051a9c19484cb1c3b5bace0bc Mon Sep 17 00:00:00 2001
From: Alexander Else <alexander.else@team.telstra.com>
Date: Mon, 18 Mar 2013 12:17:29 +1100
Subject: [PATCH 4/6] replaced calls to setsockopt/getsockopt with set/get

Relates to txZMQ issue #39.

Fix bug introduced by api changes to pyzmq (core/socket.pyx).
---
 txzmq/connection.py | 28 ++++++++++++++--------------
 txzmq/pubsub.py     |  4 ++--
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/txzmq/connection.py b/txzmq/connection.py
index 4cd9555..fbfb1be 100644
--- a/txzmq/connection.py
+++ b/txzmq/connection.py
@@ -91,33 +91,33 @@ class ZmqConnection(object):
         self.recv_parts = []
         self.read_scheduled = None
 
-        self.fd = self.socket.getsockopt(constants.FD)
-        self.socket.setsockopt(constants.LINGER, factory.lingerPeriod)
+        self.fd = self.socket.get(constants.FD)
+        self.socket.set(constants.LINGER, factory.lingerPeriod)
 
         if not ZMQ3:
-            self.socket.setsockopt(
+            self.socket.set(
                 constants.MCAST_LOOP, int(self.allowLoopbackMulticast))
 
-        self.socket.setsockopt(constants.RATE, self.multicastRate)
+        self.socket.set(constants.RATE, self.multicastRate)
 
         if not ZMQ3:
-            self.socket.setsockopt(constants.HWM, self.highWaterMark)
+            self.socket.set(constants.HWM, self.highWaterMark)
         else:
-            self.socket.setsockopt(constants.SNDHWM, self.highWaterMark)
-            self.socket.setsockopt(constants.RCVHWM, self.highWaterMark)
+            self.socket.set(constants.SNDHWM, self.highWaterMark)
+            self.socket.set(constants.RCVHWM, self.highWaterMark)
 
         if ZMQ3 and self.tcpKeepalive:
-            self.socket.setsockopt(
+            self.socket.set(
                 constants.TCP_KEEPALIVE, self.tcpKeepalive)
-            self.socket.setsockopt(
+            self.socket.set(
                 constants.TCP_KEEPALIVE_CNT, self.tcpKeepaliveCount)
-            self.socket.setsockopt(
+            self.socket.set(
                 constants.TCP_KEEPALIVE_IDLE, self.tcpKeepaliveIdle)
-            self.socket.setsockopt(
+            self.socket.set(
                 constants.TCP_KEEPALIVE_INTVL, self.tcpKeepaliveInterval)
 
         if self.identity is not None:
-            self.socket.setsockopt(constants.IDENTITY, self.identity)
+            self.socket.set(constants.IDENTITY, self.identity)
 
         if endpoint:
             self.addEndpoints([endpoint])
@@ -194,7 +194,7 @@ class ZmqConnection(object):
         """
         while True:
             self.recv_parts.append(self.socket.recv(constants.NOBLOCK))
-            if not self.socket.getsockopt(constants.RCVMORE):
+            if not self.socket.get(constants.RCVMORE):
                 result, self.recv_parts = self.recv_parts, []
 
                 return result
@@ -217,7 +217,7 @@ class ZmqConnection(object):
             if self.factory is None:  # disconnected
                 return
 
-            events = self.socket.getsockopt(constants.EVENTS)
+            events = self.socket.get(constants.EVENTS)
 
             if (events & constants.POLLIN) != constants.POLLIN:
                 return
diff --git a/txzmq/pubsub.py b/txzmq/pubsub.py
index 10c654f..8a6a7fc 100644
--- a/txzmq/pubsub.py
+++ b/txzmq/pubsub.py
@@ -37,7 +37,7 @@ class ZmqSubConnection(ZmqConnection):
         @param tag: message tag
         @type tag: C{str}
         """
-        self.socket.setsockopt(constants.SUBSCRIBE, tag)
+        self.socket.set(constants.SUBSCRIBE, tag)
 
     def unsubscribe(self, tag):
         """
@@ -46,7 +46,7 @@ class ZmqSubConnection(ZmqConnection):
         @param tag: message tag
         @type tag: C{str}
         """
-        self.socket.setsockopt(constants.UNSUBSCRIBE, tag)
+        self.socket.set(constants.UNSUBSCRIBE, tag)
 
     def messageReceived(self, message):
         """
-- 
1.8.1.4

